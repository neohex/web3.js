/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var blockchain_pb = require('./blockchain_pb.js');
goog.exportSymbol('proto.BatchRequest', null, global);
goog.exportSymbol('proto.BlockTag', null, global);
goog.exportSymbol('proto.Call', null, global);
goog.exportSymbol('proto.Request', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Call = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Call, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Call.displayName = 'proto.Call';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Call.prototype.toObject = function(opt_includeInstance) {
  return proto.Call.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Call} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Call.toObject = function(includeInstance, msg) {
  var f, obj = {
    from: msg.getFrom_asB64(),
    to: msg.getTo_asB64(),
    data: msg.getData_asB64(),
    height: msg.getHeight()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Call}
 */
proto.Call.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Call;
  return proto.Call.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Call} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Call}
 */
proto.Call.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setFrom(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTo(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setData(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Call} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Call.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Call.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Call.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getFrom_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = this.getTo_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = this.getData_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = this.getHeight();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Call} The clone.
 */
proto.Call.prototype.cloneMessage = function() {
  return /** @type {!proto.Call} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes from = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Call.prototype.getFrom = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes from = 1;
 * This is a type-conversion wrapper around `getFrom()`
 * @return {string}
 */
proto.Call.prototype.getFrom_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getFrom()));
};


/**
 * optional bytes from = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getFrom()`
 * @return {!Uint8Array}
 */
proto.Call.prototype.getFrom_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getFrom()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Call.prototype.setFrom = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bytes to = 2;
 * @return {!(string|Uint8Array)}
 */
proto.Call.prototype.getTo = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 2, ""));
};


/**
 * optional bytes to = 2;
 * This is a type-conversion wrapper around `getTo()`
 * @return {string}
 */
proto.Call.prototype.getTo_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTo()));
};


/**
 * optional bytes to = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTo()`
 * @return {!Uint8Array}
 */
proto.Call.prototype.getTo_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTo()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Call.prototype.setTo = function(value) {
  jspb.Message.setField(this, 2, value);
};


/**
 * optional bytes data = 3;
 * @return {!(string|Uint8Array)}
 */
proto.Call.prototype.getData = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 3, ""));
};


/**
 * optional bytes data = 3;
 * This is a type-conversion wrapper around `getData()`
 * @return {string}
 */
proto.Call.prototype.getData_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getData()));
};


/**
 * optional bytes data = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getData()`
 * @return {!Uint8Array}
 */
proto.Call.prototype.getData_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getData()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Call.prototype.setData = function(value) {
  jspb.Message.setField(this, 3, value);
};


/**
 * optional string height = 4;
 * @return {string}
 */
proto.Call.prototype.getHeight = function() {
  return /** @type {string} */ (jspb.Message.getFieldProto3(this, 4, ""));
};


/** @param {string} value  */
proto.Call.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Request = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.Request.oneofGroups_);
};
goog.inherits(proto.Request, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Request.displayName = 'proto.Request';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.Request.oneofGroups_ = [[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19]];

/**
 * @enum {number}
 */
proto.Request.ReqCase = {
  REQ_NOT_SET: 0,
  BLOCK_NUMBER: 2,
  BLOCK_BY_HASH: 3,
  BLOCK_BY_HEIGHT: 4,
  TRANSACTION: 5,
  HEIGHT: 6,
  PEERCOUNT: 7,
  CALL: 8,
  FILTER: 9,
  TRANSACTION_RECEIPT: 10,
  TRANSACTION_COUNT: 11,
  CODE: 12,
  NEW_FILTER: 13,
  NEW_BLOCK_FILTER: 14,
  UNINSTALL_FILTER: 15,
  FILTER_CHANGES: 16,
  FILTER_LOGS: 17,
  UN_TX: 18,
  BATCH_REQ: 19
};

/**
 * @return {proto.Request.ReqCase}
 */
proto.Request.prototype.getReqCase = function() {
  return /** @type {proto.Request.ReqCase} */(jspb.Message.computeOneofCase(this, proto.Request.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Request.prototype.toObject = function(opt_includeInstance) {
  return proto.Request.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Request} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Request.toObject = function(includeInstance, msg) {
  var f, obj = {
    requestId: msg.getRequestId_asB64(),
    blockNumber: jspb.Message.getField(msg, 2),
    blockByHash: jspb.Message.getField(msg, 3),
    blockByHeight: jspb.Message.getField(msg, 4),
    transaction: msg.getTransaction_asB64(),
    height: jspb.Message.getField(msg, 6),
    peercount: jspb.Message.getField(msg, 7),
    call: (f = msg.getCall()) && proto.Call.toObject(includeInstance, f),
    filter: jspb.Message.getField(msg, 9),
    transactionReceipt: msg.getTransactionReceipt_asB64(),
    transactionCount: jspb.Message.getField(msg, 11),
    code: jspb.Message.getField(msg, 12),
    newFilter: jspb.Message.getField(msg, 13),
    newBlockFilter: jspb.Message.getField(msg, 14),
    uninstallFilter: jspb.Message.getField(msg, 15),
    filterChanges: jspb.Message.getField(msg, 16),
    filterLogs: jspb.Message.getField(msg, 17),
    unTx: (f = msg.getUnTx()) && blockchain_pb.UnverifiedTransaction.toObject(includeInstance, f),
    batchReq: (f = msg.getBatchReq()) && proto.BatchRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Request;
  return proto.Request.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Request} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Request}
 */
proto.Request.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setRequestId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBlockNumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockByHash(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlockByHeight(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransaction(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setHeight(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPeercount(value);
      break;
    case 8:
      var value = new proto.Call;
      reader.readMessage(value,proto.Call.deserializeBinaryFromReader);
      msg.setCall(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setFilter(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionReceipt(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setTransactionCount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setNewFilter(value);
      break;
    case 14:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setNewBlockFilter(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUninstallFilter(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFilterChanges(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFilterLogs(value);
      break;
    case 18:
      var value = new blockchain_pb.UnverifiedTransaction;
      reader.readMessage(value,blockchain_pb.UnverifiedTransaction.deserializeBinaryFromReader);
      msg.setUnTx(value);
      break;
    case 19:
      var value = new proto.BatchRequest;
      reader.readMessage(value,proto.BatchRequest.deserializeBinaryFromReader);
      msg.setBatchReq(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Request} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Request.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Request.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getRequestId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeBool(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = this.getCall();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.Call.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 9);
  if (f != null) {
    writer.writeString(
      9,
      f
    );
  }
  f = jspb.Message.getField(this, 10);
  if (f != null) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = jspb.Message.getField(this, 11);
  if (f != null) {
    writer.writeString(
      11,
      f
    );
  }
  f = jspb.Message.getField(this, 12);
  if (f != null) {
    writer.writeString(
      12,
      f
    );
  }
  f = jspb.Message.getField(this, 13);
  if (f != null) {
    writer.writeString(
      13,
      f
    );
  }
  f = jspb.Message.getField(this, 14);
  if (f != null) {
    writer.writeBool(
      14,
      f
    );
  }
  f = jspb.Message.getField(this, 15);
  if (f != null) {
    writer.writeUint64(
      15,
      f
    );
  }
  f = jspb.Message.getField(this, 16);
  if (f != null) {
    writer.writeUint64(
      16,
      f
    );
  }
  f = jspb.Message.getField(this, 17);
  if (f != null) {
    writer.writeUint64(
      17,
      f
    );
  }
  f = this.getUnTx();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      blockchain_pb.UnverifiedTransaction.serializeBinaryToWriter
    );
  }
  f = this.getBatchReq();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.BatchRequest.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Request} The clone.
 */
proto.Request.prototype.cloneMessage = function() {
  return /** @type {!proto.Request} */ (jspb.Message.cloneMessage(this));
};


/**
 * optional bytes request_id = 1;
 * @return {!(string|Uint8Array)}
 */
proto.Request.prototype.getRequestId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldProto3(this, 1, ""));
};


/**
 * optional bytes request_id = 1;
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {string}
 */
proto.Request.prototype.getRequestId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getRequestId()));
};


/**
 * optional bytes request_id = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getRequestId()`
 * @return {!Uint8Array}
 */
proto.Request.prototype.getRequestId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getRequestId()));
};


/** @param {!(string|Uint8Array)} value  */
proto.Request.prototype.setRequestId = function(value) {
  jspb.Message.setField(this, 1, value);
};


/**
 * optional bool block_number = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Request.prototype.getBlockNumber = function() {
  return /** @type {boolean} */ (!this.hasBlockNumber() ? false : jspb.Message.getField(this, 2));
};


/** @param {boolean?|undefined} value  */
proto.Request.prototype.setBlockNumber = function(value) {
  jspb.Message.setOneofField(this, 2, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearBlockNumber = function() {
  jspb.Message.setOneofField(this, 2, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasBlockNumber = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string block_by_hash = 3;
 * @return {string}
 */
proto.Request.prototype.getBlockByHash = function() {
  return /** @type {string} */ (!this.hasBlockByHash() ? "" : jspb.Message.getField(this, 3));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setBlockByHash = function(value) {
  jspb.Message.setOneofField(this, 3, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearBlockByHash = function() {
  jspb.Message.setOneofField(this, 3, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasBlockByHash = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string block_by_height = 4;
 * @return {string}
 */
proto.Request.prototype.getBlockByHeight = function() {
  return /** @type {string} */ (!this.hasBlockByHeight() ? "" : jspb.Message.getField(this, 4));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setBlockByHeight = function(value) {
  jspb.Message.setOneofField(this, 4, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearBlockByHeight = function() {
  jspb.Message.setOneofField(this, 4, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasBlockByHeight = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional bytes transaction = 5;
 * @return {(string|Uint8Array)}
 */
proto.Request.prototype.getTransaction = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasTransaction() ? "" : jspb.Message.getField(this, 5));
};


/**
 * optional bytes transaction = 5;
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {string}
 */
proto.Request.prototype.getTransaction_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransaction()));
};


/**
 * optional bytes transaction = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransaction()`
 * @return {Uint8Array}
 */
proto.Request.prototype.getTransaction_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransaction()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.Request.prototype.setTransaction = function(value) {
  jspb.Message.setOneofField(this, 5, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearTransaction = function() {
  jspb.Message.setOneofField(this, 5, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint64 height = 6;
 * @return {number}
 */
proto.Request.prototype.getHeight = function() {
  return /** @type {number} */ (!this.hasHeight() ? 0 : jspb.Message.getField(this, 6));
};


/** @param {number?|undefined} value  */
proto.Request.prototype.setHeight = function(value) {
  jspb.Message.setOneofField(this, 6, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearHeight = function() {
  jspb.Message.setOneofField(this, 6, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool peercount = 7;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Request.prototype.getPeercount = function() {
  return /** @type {boolean} */ (!this.hasPeercount() ? false : jspb.Message.getField(this, 7));
};


/** @param {boolean?|undefined} value  */
proto.Request.prototype.setPeercount = function(value) {
  jspb.Message.setOneofField(this, 7, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearPeercount = function() {
  jspb.Message.setOneofField(this, 7, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasPeercount = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional Call call = 8;
 * @return {proto.Call}
 */
proto.Request.prototype.getCall = function() {
  return /** @type{proto.Call} */ (
    jspb.Message.getWrapperField(this, proto.Call, 8));
};


/** @param {proto.Call|undefined} value  */
proto.Request.prototype.setCall = function(value) {
  jspb.Message.setOneofWrapperField(this, 8, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearCall = function() {
  this.setCall(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasCall = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional string filter = 9;
 * @return {string}
 */
proto.Request.prototype.getFilter = function() {
  return /** @type {string} */ (!this.hasFilter() ? "" : jspb.Message.getField(this, 9));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setFilter = function(value) {
  jspb.Message.setOneofField(this, 9, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearFilter = function() {
  jspb.Message.setOneofField(this, 9, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasFilter = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional bytes transaction_receipt = 10;
 * @return {(string|Uint8Array)}
 */
proto.Request.prototype.getTransactionReceipt = function() {
  return /** @type {(string|Uint8Array)} */ (!this.hasTransactionReceipt() ? "" : jspb.Message.getField(this, 10));
};


/**
 * optional bytes transaction_receipt = 10;
 * This is a type-conversion wrapper around `getTransactionReceipt()`
 * @return {string}
 */
proto.Request.prototype.getTransactionReceipt_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionReceipt()));
};


/**
 * optional bytes transaction_receipt = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionReceipt()`
 * @return {Uint8Array}
 */
proto.Request.prototype.getTransactionReceipt_asU8 = function() {
  return /** @type {Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionReceipt()));
};


/** @param {(string|Uint8Array)|undefined} value  */
proto.Request.prototype.setTransactionReceipt = function(value) {
  jspb.Message.setOneofField(this, 10, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearTransactionReceipt = function() {
  jspb.Message.setOneofField(this, 10, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasTransactionReceipt = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional string transaction_count = 11;
 * @return {string}
 */
proto.Request.prototype.getTransactionCount = function() {
  return /** @type {string} */ (!this.hasTransactionCount() ? "" : jspb.Message.getField(this, 11));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setTransactionCount = function(value) {
  jspb.Message.setOneofField(this, 11, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearTransactionCount = function() {
  jspb.Message.setOneofField(this, 11, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasTransactionCount = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string code = 12;
 * @return {string}
 */
proto.Request.prototype.getCode = function() {
  return /** @type {string} */ (!this.hasCode() ? "" : jspb.Message.getField(this, 12));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setCode = function(value) {
  jspb.Message.setOneofField(this, 12, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearCode = function() {
  jspb.Message.setOneofField(this, 12, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasCode = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string new_filter = 13;
 * @return {string}
 */
proto.Request.prototype.getNewFilter = function() {
  return /** @type {string} */ (!this.hasNewFilter() ? "" : jspb.Message.getField(this, 13));
};


/** @param {string?|undefined} value  */
proto.Request.prototype.setNewFilter = function(value) {
  jspb.Message.setOneofField(this, 13, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearNewFilter = function() {
  jspb.Message.setOneofField(this, 13, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasNewFilter = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional bool new_block_filter = 14;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Request.prototype.getNewBlockFilter = function() {
  return /** @type {boolean} */ (!this.hasNewBlockFilter() ? false : jspb.Message.getField(this, 14));
};


/** @param {boolean?|undefined} value  */
proto.Request.prototype.setNewBlockFilter = function(value) {
  jspb.Message.setOneofField(this, 14, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearNewBlockFilter = function() {
  jspb.Message.setOneofField(this, 14, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasNewBlockFilter = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional uint64 uninstall_filter = 15;
 * @return {number}
 */
proto.Request.prototype.getUninstallFilter = function() {
  return /** @type {number} */ (!this.hasUninstallFilter() ? 0 : jspb.Message.getField(this, 15));
};


/** @param {number?|undefined} value  */
proto.Request.prototype.setUninstallFilter = function(value) {
  jspb.Message.setOneofField(this, 15, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearUninstallFilter = function() {
  jspb.Message.setOneofField(this, 15, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasUninstallFilter = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional uint64 filter_changes = 16;
 * @return {number}
 */
proto.Request.prototype.getFilterChanges = function() {
  return /** @type {number} */ (!this.hasFilterChanges() ? 0 : jspb.Message.getField(this, 16));
};


/** @param {number?|undefined} value  */
proto.Request.prototype.setFilterChanges = function(value) {
  jspb.Message.setOneofField(this, 16, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearFilterChanges = function() {
  jspb.Message.setOneofField(this, 16, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasFilterChanges = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional uint64 filter_logs = 17;
 * @return {number}
 */
proto.Request.prototype.getFilterLogs = function() {
  return /** @type {number} */ (!this.hasFilterLogs() ? 0 : jspb.Message.getField(this, 17));
};


/** @param {number?|undefined} value  */
proto.Request.prototype.setFilterLogs = function(value) {
  jspb.Message.setOneofField(this, 17, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearFilterLogs = function() {
  jspb.Message.setOneofField(this, 17, proto.Request.oneofGroups_[0], undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasFilterLogs = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional UnverifiedTransaction un_tx = 18;
 * @return {proto.UnverifiedTransaction}
 */
proto.Request.prototype.getUnTx = function() {
  return /** @type{proto.UnverifiedTransaction} */ (
    jspb.Message.getWrapperField(this, blockchain_pb.UnverifiedTransaction, 18));
};


/** @param {proto.UnverifiedTransaction|undefined} value  */
proto.Request.prototype.setUnTx = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearUnTx = function() {
  this.setUnTx(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasUnTx = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional BatchRequest batch_req = 19;
 * @return {proto.BatchRequest}
 */
proto.Request.prototype.getBatchReq = function() {
  return /** @type{proto.BatchRequest} */ (
    jspb.Message.getWrapperField(this, proto.BatchRequest, 19));
};


/** @param {proto.BatchRequest|undefined} value  */
proto.Request.prototype.setBatchReq = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.Request.oneofGroups_[0], value);
};


proto.Request.prototype.clearBatchReq = function() {
  this.setBatchReq(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Request.prototype.hasBatchReq = function() {
  return jspb.Message.getField(this, 19) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BatchRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BatchRequest.repeatedFields_, null);
};
goog.inherits(proto.BatchRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BatchRequest.displayName = 'proto.BatchRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BatchRequest.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BatchRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BatchRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BatchRequest} msg The msg instance to transform.
 * @return {!Object}
 */
proto.BatchRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    newTxRequestsList: jspb.Message.toObjectList(msg.getNewTxRequestsList(),
    proto.Request.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BatchRequest}
 */
proto.BatchRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BatchRequest;
  return proto.BatchRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BatchRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BatchRequest}
 */
proto.BatchRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Request;
      reader.readMessage(value,proto.Request.deserializeBinaryFromReader);
      msg.getNewTxRequestsList().push(value);
      msg.setNewTxRequestsList(msg.getNewTxRequestsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.BatchRequest} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.BatchRequest.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BatchRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.BatchRequest.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getNewTxRequestsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Request.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.BatchRequest} The clone.
 */
proto.BatchRequest.prototype.cloneMessage = function() {
  return /** @type {!proto.BatchRequest} */ (jspb.Message.cloneMessage(this));
};


/**
 * repeated Request new_tx_requests = 1;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.Request>}
 */
proto.BatchRequest.prototype.getNewTxRequestsList = function() {
  return /** @type{!Array.<!proto.Request>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Request, 1));
};


/** @param {Array.<!proto.Request>} value  */
proto.BatchRequest.prototype.setNewTxRequestsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


proto.BatchRequest.prototype.clearNewTxRequestsList = function() {
  this.setNewTxRequestsList([]);
};


/**
 * @enum {number}
 */
proto.BlockTag = {
  LATEST: 0,
  EARLIEST: 1
};

goog.object.extend(exports, proto);
